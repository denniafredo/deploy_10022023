<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=ISO-8859-1">
<TITLE>POSTNET barcodes</TITLE>
<LINK TYPE="text/css" REL="stylesheet" HREF="../fpdf.css">
</HEAD>
<BODY ONLOAD="if(window.focus) window.focus()">
<H2>POSTNET barcodes</H2>
<H4 CLASS="st">Informations</H4>Author: <A HREF="http://www.somacon.com/contact.php?subject=POSTNET+Barcodes" TARGET="_blank">Shailesh Humbad</A><BR>License: Freeware
<H4 CLASS="st">Description</H4>This is an extension for printing U.S. Postal Service POSTNET bar codes in PDF. It
supports both 5 and 9 digit zip codes and includes a utility function for parsing zip
codes from an address line. The bar code is drawn directly in PDF without using an image
or special font.<BR>
<BR>
<TT>POSTNETBarCode(<B>float</B> x, <B>float</B> y, <B>string</B> zipcode)</TT><BR>
<BR>
<TT><U>x</U></TT>: abscissa of barcode<BR>
<TT><U>y</U></TT>: ordinate of barcode<BR>
<TT><U>zipcode</U></TT>: zip code to draw<BR>
<BR>
Zipcode must be a string containing a zip code of the form DDDDD or DDDDD-DDDD. This function
will trigger a PHP error if the zip code is invalid, so if the string's validity is in question,
use ParseZipCode first. The parameters $x and $y specify the lower left corner of the bar code
in user units. This function changes the line width in the FPDF context.<BR>
<BR>
<TT><B>string</B> ParseZipCode(<B>string</B> stringToParse)</TT><BR>
<BR>
The parsed zip code returned will be the first string matching DDDDD or DDDDD-DDDD, in that
order, where D is a digit from 0 through 9. The search begins at the end of $stringToParse.<BR>
If a valid zip code cannot be found, it returns an empty string. Otherwise, it returns the
parsed zip code (including the hyphen if it's a 9-digit zip).<BR>
<BR>
A complete envelope generating example with source code is available at:<BR>
<BR>
<A HREF="http://www.somacon.com/fpdf/dynamic_envelope_in_pdf.php" TARGET="_blank">http://www.somacon.com/fpdf/dynamic_envelope_in_pdf.php</A><BR>
<BR>
<U>POSTNET BAR CODES</U><BR>
<BR>
The specifications for POSTNET Bar Codes can be found in U.S. Postal Service Publication
25, Designing Letter and Reply Mail, available via:<BR>
<BR>
<A HREF="http://www.usps.com/businessmail101/resources/" TARGET="_blank">http://www.usps.com/businessmail101/resources/</A><BR>
<BR>
See Chapter 2 for bar code placement specifications, and Chapter 4 for bar code reading
and writing specifications.<BR>
You can print bar codes on papers that will be inserted into envelopes with windows, or
directly on envelopes. For envelopes with windows, in general, the bar code should be
printed a minimum of 1/25" above the first line of the address, and below the top edge of
the envelope window. The left and right clearance for the address should be a minimum of
1/8", and the bottom clearance should be 1/25" minimum. The address must satisfy the
minimum clearances regardless of where the mailpiece shifts to within the envelope.
Note that 1/4" of clearance is preferred.<BR>
Refer to the Guidelines for complete details.
<H4 CLASS="st">Source</H4><TABLE WIDTH="100%" STYLE="color:#4040C0; border-style:ridge" BORDERCOLORLIGHT="#B0B0E0" BORDERCOLORDARK="#000000" BORDER="2" CELLPADDING=6 CELLSPACING=0 BGCOLOR="#F0F5FF"><TR><TD style="border-width:0px">
<NOBR><code><font color="#000000">
&lt;?php<br><font class="kw">require(</font><font class="str">'fpdf.php'</font><font class="kw">);<br><br>class </font>PDF_POSTNET <font class="kw">extends </font>FPDF<br><font class="kw">{<br>&nbsp;&nbsp;&nbsp;&nbsp;</font><font class="cmt">// PUBLIC PROCEDURES<br><br>&nbsp;&nbsp;&nbsp;&nbsp;// draws a bar code for the given zip code using pdf lines<br>&nbsp;&nbsp;&nbsp;&nbsp;// triggers error if zip code is invalid<br>&nbsp;&nbsp;&nbsp;&nbsp;// x,y specifies the lower left corner of the bar code<br>&nbsp;&nbsp;&nbsp;&nbsp;</font><font class="kw">function </font>POSTNETBarCode<font class="kw">(</font>$x<font class="kw">, </font>$y<font class="kw">, </font>$zipcode<font class="kw">)<br>&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</font><font class="cmt">// Save nominal bar dimensions in user units<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// Full Bar Nominal Height = 0.125"<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</font>$FullBarHeight <font class="kw">= </font>9 <font class="kw">/ </font>$<font class="kw">this-&gt;</font>k<font class="kw">;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</font><font class="cmt">// Half Bar Nominal Height = 0.050"<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</font>$HalfBarHeight <font class="kw">= </font>3.6 <font class="kw">/ </font>$<font class="kw">this-&gt;</font>k<font class="kw">;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</font><font class="cmt">// Full and Half Bar Nominal Width = 0.020"<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</font>$BarWidth <font class="kw">= </font>1.44 <font class="kw">/ </font>$<font class="kw">this-&gt;</font>k<font class="kw">;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</font><font class="cmt">// Bar Spacing = 0.050"<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</font>$BarSpacing <font class="kw">= </font>3.6 <font class="kw">/ </font>$<font class="kw">this-&gt;</font>k<font class="kw">;<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</font>$FiveBarSpacing <font class="kw">= </font>$BarSpacing <font class="kw">* </font>5<font class="kw">;<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</font><font class="cmt">// 1 represents full-height bars and 0 represents half-height bars<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</font>$BarDefinitionsArray <font class="kw">= Array(<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</font>1 <font class="kw">=&gt; Array(</font>0<font class="kw">,</font>0<font class="kw">,</font>0<font class="kw">,</font>1<font class="kw">,</font>1<font class="kw">),<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</font>2 <font class="kw">=&gt; Array(</font>0<font class="kw">,</font>0<font class="kw">,</font>1<font class="kw">,</font>0<font class="kw">,</font>1<font class="kw">),<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</font>3 <font class="kw">=&gt; Array(</font>0<font class="kw">,</font>0<font class="kw">,</font>1<font class="kw">,</font>1<font class="kw">,</font>0<font class="kw">),<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</font>4 <font class="kw">=&gt; Array(</font>0<font class="kw">,</font>1<font class="kw">,</font>0<font class="kw">,</font>0<font class="kw">,</font>1<font class="kw">),<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</font>5 <font class="kw">=&gt; Array(</font>0<font class="kw">,</font>1<font class="kw">,</font>0<font class="kw">,</font>1<font class="kw">,</font>0<font class="kw">),<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</font>6 <font class="kw">=&gt; Array(</font>0<font class="kw">,</font>1<font class="kw">,</font>1<font class="kw">,</font>0<font class="kw">,</font>0<font class="kw">),<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</font>7 <font class="kw">=&gt; Array(</font>1<font class="kw">,</font>0<font class="kw">,</font>0<font class="kw">,</font>0<font class="kw">,</font>1<font class="kw">),<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</font>8 <font class="kw">=&gt; Array(</font>1<font class="kw">,</font>0<font class="kw">,</font>0<font class="kw">,</font>1<font class="kw">,</font>0<font class="kw">),<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</font>9 <font class="kw">=&gt; Array(</font>1<font class="kw">,</font>0<font class="kw">,</font>1<font class="kw">,</font>0<font class="kw">,</font>0<font class="kw">),<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</font>0 <font class="kw">=&gt; Array(</font>1<font class="kw">,</font>1<font class="kw">,</font>0<font class="kw">,</font>0<font class="kw">,</font>0<font class="kw">));<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</font><font class="cmt">// validate the zip code<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</font>$<font class="kw">this-&gt;</font>_ValidateZipCode<font class="kw">(</font>$zipcode<font class="kw">);<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</font><font class="cmt">// set the line width<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</font>$<font class="kw">this-&gt;</font>SetLineWidth<font class="kw">(</font>$BarWidth<font class="kw">);<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</font><font class="cmt">// draw start frame bar<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</font>$<font class="kw">this-&gt;</font>Line<font class="kw">(</font>$x<font class="kw">, </font>$y<font class="kw">, </font>$x<font class="kw">, </font>$y <font class="kw">- </font>$FullBarHeight<font class="kw">);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</font>$x <font class="kw">+= </font>$BarSpacing<font class="kw">;<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</font><font class="cmt">// draw digit bars<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</font><font class="kw">for(</font>$i <font class="kw">= </font>0<font class="kw">; </font>$i <font class="kw">&lt; </font>5<font class="kw">; </font>$i<font class="kw">++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</font>$<font class="kw">this-&gt;</font>_DrawDigitBars<font class="kw">(</font>$x<font class="kw">, </font>$y<font class="kw">, </font>$BarSpacing<font class="kw">, </font>$HalfBarHeight<font class="kw">, <br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</font>$FullBarHeight<font class="kw">, </font>$BarDefinitionsArray<font class="kw">, </font>$zipcode<font class="kw">{</font>$i<font class="kw">});<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</font>$x <font class="kw">+= </font>$FiveBarSpacing<font class="kw">;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</font><font class="cmt">// draw more digit bars if 10 digit zip code<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</font><font class="kw">if(</font>strlen<font class="kw">(</font>$zipcode<font class="kw">) == </font>10<font class="kw">)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for(</font>$i <font class="kw">= </font>6<font class="kw">; </font>$i <font class="kw">&lt; </font>10<font class="kw">; </font>$i<font class="kw">++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</font>$<font class="kw">this-&gt;</font>_DrawDigitBars<font class="kw">(</font>$x<font class="kw">, </font>$y<font class="kw">, </font>$BarSpacing<font class="kw">, </font>$HalfBarHeight<font class="kw">, <br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</font>$FullBarHeight<font class="kw">, </font>$BarDefinitionsArray<font class="kw">, </font>$zipcode<font class="kw">{</font>$i<font class="kw">});<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</font>$x <font class="kw">+= </font>$FiveBarSpacing<font class="kw">;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</font><font class="cmt">// draw check sum digit<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</font>$<font class="kw">this-&gt;</font>_DrawDigitBars<font class="kw">(</font>$x<font class="kw">, </font>$y<font class="kw">, </font>$BarSpacing<font class="kw">, </font>$HalfBarHeight<font class="kw">, <br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</font>$FullBarHeight<font class="kw">, </font>$BarDefinitionsArray<font class="kw">, <br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</font>$<font class="kw">this-&gt;</font>_CalculateCheckSumDigit<font class="kw">(</font>$zipcode<font class="kw">));<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</font>$x <font class="kw">+= </font>$FiveBarSpacing<font class="kw">;<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</font><font class="cmt">// draw end frame bar<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</font>$<font class="kw">this-&gt;</font>Line<font class="kw">(</font>$x<font class="kw">, </font>$y<font class="kw">, </font>$x<font class="kw">, </font>$y <font class="kw">- </font>$FullBarHeight<font class="kw">);<br><br>&nbsp;&nbsp;&nbsp;&nbsp;}<br><br>&nbsp;&nbsp;&nbsp;&nbsp;</font><font class="cmt">// Reads from end of string and returns first matching valid<br>&nbsp;&nbsp;&nbsp;&nbsp;// zip code of form DDDDD or DDDDD-DDDD, in that order.<br>&nbsp;&nbsp;&nbsp;&nbsp;// Returns empty string if no zip code found.<br>&nbsp;&nbsp;&nbsp;&nbsp;</font><font class="kw">function </font>ParseZipCode<font class="kw">(</font>$stringToParse<font class="kw">)<br>&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</font><font class="cmt">// check if string is an array or object<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</font><font class="kw">if(</font>is_array<font class="kw">(</font>$stringToParse<font class="kw">) || </font>is_object<font class="kw">(</font>$stringToParse<font class="kw">))<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return </font><font class="str">""</font><font class="kw">;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</font><font class="cmt">// convert parameter to a string<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</font>$stringToParse <font class="kw">= </font>strval<font class="kw">(</font>$stringToParse<font class="kw">);<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</font>$lengthOfString <font class="kw">= </font>strlen<font class="kw">(</font>$stringToParse<font class="kw">);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if ( </font>$lengthOfString <font class="kw">&lt; </font>5 <font class="kw">) {<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return </font><font class="str">""</font><font class="kw">;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</font><font class="cmt">// parse the zip code backward<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</font>$zipcodeLength <font class="kw">= </font>0<font class="kw">;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</font>$zipcode <font class="kw">= </font><font class="str">""</font><font class="kw">;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (</font>$i <font class="kw">= </font>$lengthOfString<font class="kw">-</font>1<font class="kw">; </font>$i <font class="kw">&gt;= </font>0<font class="kw">; </font>$i<font class="kw">--)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</font><font class="cmt">// conditions to continue the zip code<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</font><font class="kw">switch(</font>$zipcodeLength<font class="kw">)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;case </font>0<font class="kw">:<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;case </font>1<font class="kw">:<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;case </font>2<font class="kw">:<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;case </font>3<font class="kw">:<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if ( </font>is_numeric<font class="kw">(</font>$stringToParse<font class="kw">{</font>$i<font class="kw">}) ) {<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</font>$zipcodeLength <font class="kw">+= </font>1<font class="kw">;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</font>$zipcode <font class="kw">.= </font>$stringToParse<font class="kw">{</font>$i<font class="kw">};<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;} else {<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</font>$zipcodeLength <font class="kw">= </font>0<font class="kw">;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</font>$zipcode <font class="kw">= </font><font class="str">""</font><font class="kw">;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;break;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;case </font>4<font class="kw">:<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if ( </font>$stringToParse<font class="kw">{</font>$i<font class="kw">} == </font><font class="str">"-" </font><font class="kw">) {<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</font>$zipcodeLength <font class="kw">+= </font>1<font class="kw">;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</font>$zipcode <font class="kw">.= </font>$stringToParse<font class="kw">{</font>$i<font class="kw">};<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;} elseif ( </font>is_numeric<font class="kw">(</font>$stringToParse<font class="kw">{</font>$i<font class="kw">}) ) {<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</font>$zipcodeLength <font class="kw">+= </font>1<font class="kw">;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</font>$zipcode <font class="kw">.= </font>$stringToParse<font class="kw">{</font>$i<font class="kw">};<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;break </font>2<font class="kw">;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;} else {<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</font>$zipcodeLength <font class="kw">= </font>0<font class="kw">;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</font>$zipcode <font class="kw">= </font><font class="str">""</font><font class="kw">;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;break;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;case </font>5<font class="kw">:<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;case </font>6<font class="kw">:<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;case </font>7<font class="kw">:<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;case </font>8<font class="kw">:<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if ( </font>is_numeric<font class="kw">(</font>$stringToParse<font class="kw">{</font>$i<font class="kw">}) ) {<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</font>$zipcodeLength <font class="kw">= </font>$zipcodeLength <font class="kw">+ </font>1<font class="kw">;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</font>$zipcode <font class="kw">= </font>$zipcode <font class="kw">. </font>$stringToParse<font class="kw">{</font>$i<font class="kw">};<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;} else {<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</font>$zipcodeLength <font class="kw">= </font>0<font class="kw">;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</font>$zipcode <font class="kw">= </font><font class="str">""</font><font class="kw">;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;break;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;case </font>9<font class="kw">:<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if ( </font>is_numeric<font class="kw">(</font>$stringToParse<font class="kw">{</font>$i<font class="kw">}) ) {<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</font>$zipcodeLength <font class="kw">= </font>$zipcodeLength <font class="kw">+ </font>1<font class="kw">;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</font>$zipcode <font class="kw">= </font>$zipcode <font class="kw">. </font>$stringToParse<font class="kw">{</font>$i<font class="kw">};<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;break;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;} else {<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</font>$zipcodeLength <font class="kw">= </font>0<font class="kw">;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</font>$zipcode <font class="kw">= </font><font class="str">""</font><font class="kw">;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;break;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</font><font class="cmt">// return the parsed zip code if found<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</font><font class="kw">if ( </font>$zipcodeLength <font class="kw">== </font>5 <font class="kw">|| </font>$zipcodeLength <font class="kw">== </font>10 <font class="kw">) {<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</font><font class="cmt">// reverse the zip code<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</font><font class="kw">return </font>strrev<font class="kw">(</font>$zipcode<font class="kw">);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;} else {<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return </font><font class="str">""</font><font class="kw">;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br><br>&nbsp;&nbsp;&nbsp;&nbsp;}<br><br>&nbsp;&nbsp;&nbsp;&nbsp;</font><font class="cmt">// PRIVATE PROCEDURES<br><br>&nbsp;&nbsp;&nbsp;&nbsp;// triggers user error if the zip code is invalid<br>&nbsp;&nbsp;&nbsp;&nbsp;// valid zip codes are of the form DDDDD or DDDDD-DDDD<br>&nbsp;&nbsp;&nbsp;&nbsp;// where D is a digit from 0 to 9, returns the validated zip code<br>&nbsp;&nbsp;&nbsp;&nbsp;</font><font class="kw">function </font>_ValidateZipCode<font class="kw">(</font>$zipcode<font class="kw">)<br>&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</font>$functionname <font class="kw">= </font><font class="str">"ValidateZipCode Error: "</font><font class="kw">;<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</font><font class="cmt">// check if zipcode is an array or object<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</font><font class="kw">if(</font>is_array<font class="kw">(</font>$zipcode<font class="kw">) || </font>is_object<font class="kw">(</font>$zipcode<font class="kw">))<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</font>trigger_error<font class="kw">(</font>$functionname<font class="kw">.<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</font><font class="str">"Zip code may not be an array or object."</font><font class="kw">, </font>E_USER_ERROR<font class="kw">);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</font><font class="cmt">// convert zip code to a string<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</font>$zipcode <font class="kw">= </font>strval<font class="kw">(</font>$zipcode<font class="kw">);<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</font><font class="cmt">// check if length is 5<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</font><font class="kw">if ( </font>strlen<font class="kw">(</font>$zipcode<font class="kw">) != </font>5 <font class="kw">&amp;&amp; </font>strlen<font class="kw">(</font>$zipcode<font class="kw">) != </font>10 <font class="kw">) {<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</font>trigger_error<font class="kw">(</font>$functionname<font class="kw">.<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</font><font class="str">"Zip code must be 5 digits or 10 digits including hyphen. len:"</font><font class="kw">.<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</font>strlen<font class="kw">(</font>$zipcode<font class="kw">).</font><font class="str">" zipcode: "</font><font class="kw">.</font>$zipcode<font class="kw">, </font>E_USER_ERROR<font class="kw">);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if ( </font>strlen<font class="kw">(</font>$zipcode<font class="kw">) == </font>5 <font class="kw">) {<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</font><font class="cmt">// check that all characters are numeric<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</font><font class="kw">for ( </font>$i <font class="kw">= </font>0<font class="kw">; </font>$i <font class="kw">&lt; </font>5<font class="kw">; </font>$i<font class="kw">++ ) {<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if ( </font>is_numeric<font class="kw">( </font>$zipcode<font class="kw">{</font>$i<font class="kw">} ) == </font>false <font class="kw">) {<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</font>trigger_error<font class="kw">(</font>$functionname<font class="kw">.<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</font><font class="str">"5 digit zip code contains non-numeric character."</font><font class="kw">,<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</font>E_USER_ERROR<font class="kw">);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;} else {<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</font><font class="cmt">// check for hyphen<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</font><font class="kw">if ( </font>$zipcode<font class="kw">{</font>5<font class="kw">} != </font><font class="str">"-" </font><font class="kw">) {<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</font>trigger_error<font class="kw">(</font>$functionname<font class="kw">.<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</font><font class="str">"10 digit zip code does not contain hyphen in right place."</font><font class="kw">,<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</font>E_USER_ERROR<font class="kw">);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</font><font class="cmt">// check that all characters are numeric<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</font><font class="kw">for ( </font>$i <font class="kw">= </font>0<font class="kw">; </font>$i <font class="kw">&lt; </font>10<font class="kw">; </font>$i<font class="kw">++ ) {<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if ( </font>is_numeric<font class="kw">(</font>$zipcode<font class="kw">{</font>$i<font class="kw">}) == </font>false <font class="kw">&amp;&amp; </font>$i <font class="kw">!= </font>5 <font class="kw">) {<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</font>trigger_error<font class="kw">(</font>$functionname<font class="kw">.<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</font><font class="str">"10 digit zip code contains non-numeric character."</font><font class="kw">,<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</font>E_USER_ERROR<font class="kw">);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</font><font class="cmt">// return the string<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</font><font class="kw">return </font>$zipcode<font class="kw">;<br>&nbsp;&nbsp;&nbsp;&nbsp;}<br><br>&nbsp;&nbsp;&nbsp;&nbsp;</font><font class="cmt">// takes a validated zip code and <br>&nbsp;&nbsp;&nbsp;&nbsp;// calculates the checksum for POSTNET<br>&nbsp;&nbsp;&nbsp;&nbsp;</font><font class="kw">function </font>_CalculateCheckSumDigit<font class="kw">(</font>$zipcode<font class="kw">)<br>&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</font><font class="cmt">// calculate sum of digits<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</font><font class="kw">if( </font>strlen<font class="kw">(</font>$zipcode<font class="kw">) == </font>10 <font class="kw">) {<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</font>$sumOfDigits <font class="kw">= </font>$zipcode<font class="kw">{</font>0<font class="kw">} + </font>$zipcode<font class="kw">{</font>1<font class="kw">} + <br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</font>$zipcode<font class="kw">{</font>2<font class="kw">} + </font>$zipcode<font class="kw">{</font>3<font class="kw">} + </font>$zipcode<font class="kw">{</font>4<font class="kw">} + <br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</font>$zipcode<font class="kw">{</font>6<font class="kw">} + </font>$zipcode<font class="kw">{</font>7<font class="kw">} + </font>$zipcode<font class="kw">{</font>8<font class="kw">} + <br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</font>$zipcode<font class="kw">{</font>9<font class="kw">};<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;} else {<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</font>$sumOfDigits <font class="kw">= </font>$zipcode<font class="kw">{</font>0<font class="kw">} + </font>$zipcode<font class="kw">{</font>1<font class="kw">} + <br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</font>$zipcode<font class="kw">{</font>2<font class="kw">} + </font>$zipcode<font class="kw">{</font>3<font class="kw">} + </font>$zipcode<font class="kw">{</font>4<font class="kw">};<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</font><font class="cmt">// return checksum digit<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</font><font class="kw">if( (</font>$sumOfDigits <font class="kw">% </font>10<font class="kw">) == </font>0 <font class="kw">)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return </font>0<font class="kw">;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return </font>10 <font class="kw">- (</font>$sumOfDigits <font class="kw">% </font>10<font class="kw">);<br>&nbsp;&nbsp;&nbsp;&nbsp;}<br><br>&nbsp;&nbsp;&nbsp;&nbsp;</font><font class="cmt">// Takes a digit and draws the corresponding POSTNET bars.<br>&nbsp;&nbsp;&nbsp;&nbsp;</font><font class="kw">function </font>_DrawDigitBars<font class="kw">(</font>$x<font class="kw">, </font>$y<font class="kw">, </font>$BarSpacing<font class="kw">, </font>$HalfBarHeight<font class="kw">, </font>$FullBarHeight<font class="kw">,<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</font>$BarDefinitionsArray<font class="kw">, </font>$digit<font class="kw">)<br>&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</font><font class="cmt">// check for invalid digit<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</font><font class="kw">if(</font>$digit <font class="kw">&lt; </font>0 <font class="kw">&amp;&amp; </font>$digit <font class="kw">&gt; </font>9<font class="kw">)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</font>trigger_error<font class="kw">(</font><font class="str">"DrawDigitBars: invalid digit."</font><font class="kw">, </font>E_USER_ERROR<font class="kw">);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</font><font class="cmt">// draw the five bars representing a digit<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</font><font class="kw">for(</font>$i <font class="kw">= </font>0<font class="kw">; </font>$i <font class="kw">&lt; </font>5<font class="kw">; </font>$i<font class="kw">++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if(</font>$BarDefinitionsArray<font class="kw">[</font>$digit<font class="kw">][</font>$i<font class="kw">] == </font>1<font class="kw">)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</font>$<font class="kw">this-&gt;</font>Line<font class="kw">(</font>$x<font class="kw">, </font>$y<font class="kw">, </font>$x<font class="kw">, </font>$y <font class="kw">- </font>$FullBarHeight<font class="kw">);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</font>$<font class="kw">this-&gt;</font>Line<font class="kw">(</font>$x<font class="kw">, </font>$y<font class="kw">, </font>$x<font class="kw">, </font>$y <font class="kw">- </font>$HalfBarHeight<font class="kw">);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</font>$x <font class="kw">+= </font>$BarSpacing<font class="kw">;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;}<br><br>}<br></font>?&gt;
</font>
</code></NOBR></TD></TR></TABLE>

<H4 CLASS="st">Example</H4><TABLE WIDTH="100%" STYLE="color:#4040C0; border-style:ridge" BORDERCOLORLIGHT="#B0B0E0" BORDERCOLORDARK="#000000" BORDER="2" CELLPADDING=6 CELLSPACING=0 BGCOLOR="#F0F5FF"><TR><TD style="border-width:0px">
<NOBR><code><font color="#000000">
&lt;?php<br>define<font class="kw">(</font><font class="str">'FPDF_FONTPATH'</font><font class="kw">,</font><font class="str">'font/'</font><font class="kw">);<br>require(</font><font class="str">'postnet.php'</font><font class="kw">);<br><br></font>$pdf <font class="kw">= new </font>PDF_POSTNET<font class="kw">(</font><font class="str">"P"</font><font class="kw">,</font><font class="str">"pt"</font><font class="kw">);<br></font>$pdf<font class="kw">-&gt;</font>Open<font class="kw">();<br></font>$pdf<font class="kw">-&gt;</font>AddPage<font class="kw">();<br></font>$pdf<font class="kw">-&gt;</font>SetFont<font class="kw">(</font><font class="str">"Arial"</font><font class="kw">,</font><font class="str">""</font><font class="kw">,</font>10<font class="kw">);<br><br></font><font class="cmt">// ParseZipCode examples<br>//$stringToParse = "Ann Arbor, MI 48109-110asdf"; // returns "48109"<br>//$stringToParse = "Ann Arbor, MI 48109-110"; // returns "48109"<br>//$stringToParse = "Ann Arbor, MI 481091109"; // returns "91109"<br>//$stringToParse = "Ann Arbor, MI 48109-1109asdf"; // returns "48109-1109"<br>//$stringToParse = "Cambridge, MA 0192"; // returns empty string<br>//$stringToParse = "Cambridge, MA 02139"; // perfect, returns "01239"<br></font>$stringToParse <font class="kw">= </font><font class="str">"Ann Arbor, MI 48109-1109"</font><font class="kw">; </font><font class="cmt">// perfect, returns "48109-1109"<br><br></font>$zipcode <font class="kw">= </font>$pdf<font class="kw">-&gt;</font>ParseZipCode<font class="kw">(</font>$stringToParse<font class="kw">);<br></font>$pdf<font class="kw">-&gt;</font>POSTNETBarCode<font class="kw">(</font>40<font class="kw">,</font>40<font class="kw">,</font>$zipcode<font class="kw">);<br></font>$pdf<font class="kw">-&gt;</font>Text<font class="kw">(</font>40<font class="kw">,</font>90<font class="kw">,</font>$zipcode<font class="kw">);<br><br></font>$pdf<font class="kw">-&gt;</font>Output<font class="kw">();<br></font>?&gt;
</font>
</code></NOBR></TD></TR></TABLE>
<BR>
View the result <A HREF="ex27.pdf" TARGET="_blank">here</A>.
<H4 CLASS="st">Download</H4><A HREF="script27.zip">ZIP</A> | <A HREF="script27.tgz">TGZ</A>
</BODY>
</HTML>
